{"ast":null,"code":"import * as THREE from 'three';\nimport islandModelSrc from './models/island.glb';\nimport cyclistModelSrc from './models/cyclist.glb';\n\n// 附加組件 控制器與載入器\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js';\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\nimport { DRACOLoader } from 'three/addons/loaders/DRACOLoader.js';\n\n// 場景 相機 渲染器\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera(\n//視野角度 寬高比 聚焦的近截面 聚焦的遠截面 \n75, window.innerWidth / window.innerHeight, 0.5, 1000);\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\ncamera.position.set(0, 0, 15);\n\n// 設置環境光 AmbientLight\n// let ambientLight = new THREE.AmbientLight(0xffffff);\n// scene.add(ambientLight);\nscene.castShadow = true;\nscene.receiveShadow = true;\n\n//light\n// const hemiLight = new THREE.HemisphereLight( 0xffffff, 0xffffff, 2 );\n// hemiLight.color.setHSL( 0.6, 1, 0.6 );\n// hemiLight.groundColor.setHSL( 0.095, 1, 0.75 );\n// hemiLight.position.set( 0, 50, 0 );\n// scene.add( hemiLight );\n\n// const hemiLightHelper = new THREE.HemisphereLightHelper( hemiLight, 10 );\n// scene.add( hemiLightHelper );\n\n// const dirLight = new THREE.DirectionalLight( 0xffffff, 3 );\n// dirLight.color.setHSL( 0.1, 1, 0.95 );\n// dirLight.position.set( - 1, 1.75, 1 );\n// dirLight.position.multiplyScalar( 30 );\n// scene.add( dirLight );\n\n// dirLight.castShadow = true;\n\n// dirLight.shadow.mapSize.width = 2048;\n// dirLight.shadow.mapSize.height = 2048;\n\n// const d = 50;\n\n// dirLight.shadow.camera.left = - d;\n// dirLight.shadow.camera.right = d;\n// dirLight.shadow.camera.top = d;\n// dirLight.shadow.camera.bottom = - d;\n\n// dirLight.shadow.camera.far = 3500;\n// dirLight.shadow.bias = - 0.0001;\n\n// const dirLightHelper = new THREE.DirectionalLightHelper( dirLight, 10 );\n// scene.add( dirLightHelper );\n\nconst hemiLight = new THREE.HemisphereLight(0xffffff, 0x8d8d8d, 3);\nhemiLight.position.set(0, 20, 0);\nscene.add(hemiLight);\nconst dirLight = new THREE.DirectionalLight(0xffffff, 3);\ndirLight.position.set(0, 20, 10);\nscene.add(dirLight);\n\n// 環境背景 設置透明\nrenderer.setClearColor(0xffffff, 0);\n// const colorSkyblue = new THREE.Color(0x7FA9E9);\n// const colorWhite = new THREE.Color(0xE1EAFB);\n// const sceneBg = new THREE.Color().lerpColors( colorSkyblue, colorWhite, 0.5 );\n// scene.background = sceneBg;\n\n// 創建一個立方體物件在場景中 幾何物件 材質 網格\n// const geometry = new THREE.BoxGeometry( 1, 1, 1 );\n// const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n// const cube = new THREE.Mesh( geometry, material );\n// scene.add( cube );\n\n// 控制器與載入器\nconst controls = new OrbitControls(camera, renderer.domElement);\nconst loader = new GLTFLoader();\nconst dracoLoader = new DRACOLoader();\ndracoLoader.setDecoderPath('https://www.gstatic.com/draco/versioned/decoders/1.5.6/');\nloader.setDRACOLoader(dracoLoader);\nlet mixer;\nasync function init() {\n  const island = await loader.loadAsync(islandModelSrc, undefined);\n  const cyclist = await loader.loadAsync(cyclistModelSrc, undefined);\n  scene.add(island.scene);\n  scene.add(cyclist.scene);\n\n  //cyclist\n  cyclist.scene.position.set(0, 0, 11.5);\n  cyclist.scene.scale.set(0.4, 0.4, 0.4);\n  // cyclist.scene.rotation.y = Math.PI / 2\n\n  // cyclist AnimationClip\n  mixer = new THREE.AnimationMixer(cyclist.scene);\n  const clips = cyclist.animations;\n  const clip = THREE.AnimationClip.findByName(clips, 'Cycling_Normal_24');\n  const action = mixer.clipAction(clip);\n  action.timeScale = 1 / 5;\n  action.play();\n\n  //controls\n  controls.maxPolarAngle = 1.48;\n  controls.minPolarAngle = 1.35;\n  // controls.autoRotate = true\n  controls.autoRotateSpeed = -0.1;\n  function changeControls() {\n    const cameraAngle = controls.getAzimuthalAngle();\n    const cyclistPositionX = Math.sin(cameraAngle) * 11.5;\n    const cyclistPositionZ = Math.cos(cameraAngle) * 11.5;\n    cyclist.scene.position.set(cyclistPositionX, 0, cyclistPositionZ);\n    cyclist.scene.rotation.y = cameraAngle;\n    console.log(\n    // \"getDistance\",controls.getDistance(),\n    // \"getPolarAngle 垂直旋转\",controls.getPolarAngle(),\n    \"getAzimuthalAngle 水平旋转\", controls.getAzimuthalAngle()\n    // \"rotateSpeed\" , controls.rotateSpeed\n    );\n  }\n  controls.addEventListener(\"change\", changeControls, false);\n  console.log({\n    island\n  }, {\n    cyclist\n  }, {\n    scene\n  }, controls);\n}\ninit();\nconst clock = new THREE.Clock();\nfunction animate() {\n  requestAnimationFrame(animate);\n  controls.update();\n  if (mixer) mixer.update(clock.getDelta());\n  renderer.render(scene, camera);\n}\n;\nanimate();","map":{"version":3,"names":["THREE","islandModelSrc","cyclistModelSrc","OrbitControls","GLTFLoader","DRACOLoader","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","document","body","appendChild","domElement","position","set","castShadow","receiveShadow","hemiLight","HemisphereLight","add","dirLight","DirectionalLight","setClearColor","controls","loader","dracoLoader","setDecoderPath","setDRACOLoader","mixer","init","island","loadAsync","undefined","cyclist","scale","AnimationMixer","clips","animations","clip","AnimationClip","findByName","action","clipAction","timeScale","play","maxPolarAngle","minPolarAngle","autoRotateSpeed","changeControls","cameraAngle","getAzimuthalAngle","cyclistPositionX","Math","sin","cyclistPositionZ","cos","rotation","y","console","log","addEventListener","clock","Clock","animate","requestAnimationFrame","update","getDelta","render"],"sources":["/Users/minnalee/react-3d-model/src/main.js"],"sourcesContent":["import * as THREE from 'three';\nimport islandModelSrc from './models/island.glb';\nimport cyclistModelSrc from './models/cyclist.glb';\n\n// 附加組件 控制器與載入器\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js';\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\nimport { DRACOLoader } from 'three/addons/loaders/DRACOLoader.js';\n\n// 場景 相機 渲染器\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera( \n    //視野角度 寬高比 聚焦的近截面 聚焦的遠截面 \n    75, window.innerWidth / window.innerHeight, 0.5, 1000 \n);\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize( window.innerWidth, window.innerHeight );\ndocument.body.appendChild( renderer.domElement );\ncamera.position.set( 0, 0, 15 );\n\n// 設置環境光 AmbientLight\n// let ambientLight = new THREE.AmbientLight(0xffffff);\n// scene.add(ambientLight);\nscene.castShadow = true;\nscene.receiveShadow = true;\n\n//light\n// const hemiLight = new THREE.HemisphereLight( 0xffffff, 0xffffff, 2 );\n// hemiLight.color.setHSL( 0.6, 1, 0.6 );\n// hemiLight.groundColor.setHSL( 0.095, 1, 0.75 );\n// hemiLight.position.set( 0, 50, 0 );\n// scene.add( hemiLight );\n\n// const hemiLightHelper = new THREE.HemisphereLightHelper( hemiLight, 10 );\n// scene.add( hemiLightHelper );\n\n// const dirLight = new THREE.DirectionalLight( 0xffffff, 3 );\n// dirLight.color.setHSL( 0.1, 1, 0.95 );\n// dirLight.position.set( - 1, 1.75, 1 );\n// dirLight.position.multiplyScalar( 30 );\n// scene.add( dirLight );\n\n// dirLight.castShadow = true;\n\n// dirLight.shadow.mapSize.width = 2048;\n// dirLight.shadow.mapSize.height = 2048;\n\n// const d = 50;\n\n// dirLight.shadow.camera.left = - d;\n// dirLight.shadow.camera.right = d;\n// dirLight.shadow.camera.top = d;\n// dirLight.shadow.camera.bottom = - d;\n\n// dirLight.shadow.camera.far = 3500;\n// dirLight.shadow.bias = - 0.0001;\n\n// const dirLightHelper = new THREE.DirectionalLightHelper( dirLight, 10 );\n// scene.add( dirLightHelper );\n\nconst hemiLight = new THREE.HemisphereLight( 0xffffff, 0x8d8d8d, 3 );\nhemiLight.position.set( 0, 20, 0 );\nscene.add( hemiLight );\n\nconst dirLight = new THREE.DirectionalLight( 0xffffff, 3 );\ndirLight.position.set( 0, 20, 10 );\nscene.add( dirLight );\n\n// 環境背景 設置透明\nrenderer.setClearColor(0xffffff, 0)\n// const colorSkyblue = new THREE.Color(0x7FA9E9);\n// const colorWhite = new THREE.Color(0xE1EAFB);\n// const sceneBg = new THREE.Color().lerpColors( colorSkyblue, colorWhite, 0.5 );\n// scene.background = sceneBg;\n\n// 創建一個立方體物件在場景中 幾何物件 材質 網格\n// const geometry = new THREE.BoxGeometry( 1, 1, 1 );\n// const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n// const cube = new THREE.Mesh( geometry, material );\n// scene.add( cube );\n\n// 控制器與載入器\nconst controls = new OrbitControls( camera, renderer.domElement );\nconst loader = new GLTFLoader();\nconst dracoLoader = new DRACOLoader();\ndracoLoader.setDecoderPath('https://www.gstatic.com/draco/versioned/decoders/1.5.6/');\nloader.setDRACOLoader( dracoLoader );\n\nlet mixer;\nasync function init() {\n    const island = await loader.loadAsync(islandModelSrc,undefined);\n    const cyclist = await loader.loadAsync(cyclistModelSrc,undefined);\n    scene.add(island.scene);\n    scene.add(cyclist.scene);\n\n    //cyclist\n    cyclist.scene.position.set(0,0,11.5)\n    cyclist.scene.scale.set(0.4,0.4,0.4)\n    // cyclist.scene.rotation.y = Math.PI / 2\n\n    // cyclist AnimationClip\n    mixer = new THREE.AnimationMixer( cyclist.scene );\n    const clips = cyclist.animations;\n    const clip = THREE.AnimationClip.findByName( clips, 'Cycling_Normal_24' );\n    const action = mixer.clipAction( clip );\n    action.timeScale = 1/5;\n    action.play();\n\n    //controls\n    controls.maxPolarAngle = 1.48;\n    controls.minPolarAngle = 1.35;\n    // controls.autoRotate = true\n    controls.autoRotateSpeed = -0.1\n\n    function changeControls(){\n        const cameraAngle = controls.getAzimuthalAngle()\n        const cyclistPositionX = Math.sin(cameraAngle) * 11.5\n        const cyclistPositionZ = Math.cos(cameraAngle) * 11.5\n        cyclist.scene.position.set( cyclistPositionX, 0, cyclistPositionZ )\n        cyclist.scene.rotation.y = cameraAngle\n        console.log(\n            // \"getDistance\",controls.getDistance(),\n            // \"getPolarAngle 垂直旋转\",controls.getPolarAngle(),\n            \"getAzimuthalAngle 水平旋转\",controls.getAzimuthalAngle(),\n            // \"rotateSpeed\" , controls.rotateSpeed\n        )\n    }\n    controls.addEventListener(\"change\",changeControls, false)\n\n    console.log(\n        {island},\n        {cyclist},\n        {scene},\n        controls\n    )\n}\ninit();\n\nconst clock = new THREE.Clock();\nfunction animate() {\n    requestAnimationFrame( animate );\n    controls.update();\n    if ( mixer ) mixer.update( clock.getDelta() );\n    renderer.render( scene, camera );\n};\nanimate();\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}